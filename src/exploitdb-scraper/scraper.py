import urllib.request
import urllib.parse
import re

from datetime import datetime
from bs4 import BeautifulSoup

#TODO: refractor some methods as they look through the same chunk of info (findCVE(), findPlatform(), findDate())
#TODO: Ask if the returning 'None' should return an empty string or type None 
'''
Use BeautifulSoup to obtain and parse through the html of an Exploit-db.com page
 and return the basic info of the exploit.
'''

class ExploitDBScraper:
    def findVerified(self, soup):
        '''
        Use BeautifulSoup to grab whether an exploit has been verified or not
        '''
        icons = soup.find_all('i')
        for icon in icons:
            icon_class = icon.get('class')
            if 'mdi-close' in icon_class:
                return('Not Verified')
            elif 'mdi-check' in icon_class:
                return('Verified')
            else:
                continue
    
    def findEDBID(self, url):
        return url.split('/')[-1]
                
    def findCVE(self, soup):
        for entry in soup.find_all('h6', class_='stats-title'):
            for link in entry.find_all('a'):
                if 'https://nvd.nist.gov/vuln/detail' in link['href']:
                    return(link.text.strip())
        return('None')
    
    def findPlatform(self, soup):
        for entry in soup.find_all('h6', class_='stats-title'):
            for link in entry.find_all('a'):
                if '/?platform=' in link['href']:
                    return(link.text.strip())
        return('None')
    
    def findDownloadLink(self, url):
        return url.replace('exploits', 'download')
    
    def findVulnerableAppLink(self, soup, url):
        sublink = None;
        for link in soup.find_all('a', href=True):
            if '/apps/' in link['href']:
                sublink = link.get('href')
        if sublink is None:
            return 'None'
            
        url = url.rsplit("/", 2)[0]
        return url + sublink
    
    def findDate(self, soup):
        for entry in soup.find_all('h6', class_='stats-title'):
            match = re.search(r'\d{4}-\d{2}-\d{2}', str(entry)) #Find substring formatted as date
            if match is not None:
                return str(datetime.strptime(match.group(), '%Y-%m-%d').date())
            
        return('None')
    
    def getInfo(self):
        scrape_results = [['EDB-ID', self.findEDBID(self.url)],
                          ['CVE', self.findCVE(self.soup)],
                          ['Platform', self.findPlatform(self.soup)],
                          ['Date', self.findDate(self.soup)],
                          ['EDB Verified', self.findVerified(self.soup)],
                          ['Exploit Download Link', self.findDownloadLink(self.url)],
                          ['Vulnerable App Link', self.findVulnerableAppLink(self.soup, self.url)]]
        
        return scrape_results
    
    
    def __init__(self, url):
        self.url = 'https://www.exploit-db.com/exploits/48057'
        req = urllib.request.Request(url)
        resp = urllib.request.urlopen(req)
        self.soup = BeautifulSoup(resp, features='html.parser')
        

exploit = ExploitDBScraper('https://www.exploit-db.com/exploits/48057')
print(exploit.getInfo())
